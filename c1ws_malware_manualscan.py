import subprocess
import time 
import requests
import json
import sys
import socket

# Function to get the the ID of the computer running the script and return the URL to describe the same computer
def findComputerId(apiKey, c1Region):

    url = "https://workload." + c1Region + ".cloudone.trendmicro.com/api/computers"

    headers = {
    'api-version': 'v1',
    'Authorization': 'ApiKey ' + apiKey,
    }
        
    # Try to make the request
    try:
        res = requests.request("GET", url, headers=headers)
        # To raise HTTP exception
        res.raise_for_status()

    except requests.exceptions.HTTPError as err:
            print("An exception occurred when calling the API: {}".format(err))
            sys.exit(1)
    else:
        final_response = json.loads(res.text)

        # Get the machine IP addr
        machine_ip_addr =  socket.gethostbyname(socket.gethostname())

        for machine_ip in final_response["computers"]:
            # If the machine_ip_addr is the same as one of the IPs in Workload Security
            if machine_ip_addr == machine_ip["lastIPUsed"]:
                
                computer_id = machine_ip["ID"]

                return(url + "/" + str(computer_id))

def queryManualScanResult(apiKey, c1Region):

    url = findComputerId(apiKey, c1Region)

    headers = {
    'api-version': 'v1',
    'Authorization': 'ApiKey ' + apiKey,
    }
        
    # Try to make the request
    try:
        res = requests.request("GET", url, headers=headers)
        # To raise HTTP exception
        res.raise_for_status()

    except requests.exceptions.HTTPError as err:
            print("An exception occurred when calling the API: {}".format(err))
            sys.exit(1)

    else:
        final_response = json.loads(res.text)

        if final_response:
            
            # What is the agent status
            agent_status = final_response["computerStatus"]["agentStatusMessages"]

            # Get when was the last Malware Manual Scan and transforming in seconds
            manual_scan_epoch_now = final_response["antiMalware"]["lastManualScan"]
            agent_last_manual_scan = time.strftime("%a, %d %b %Y - %H:%M:%S %p %z", time.gmtime(manual_scan_epoch_now /1000))
    
            # If the Status of the agent is Managed and is Online
            if agent_status == ['Managed (Online)']:
                print("Last time Manual Scan scanned: {}".format(agent_last_manual_scan))

                # Trying to check if there is any task with the Malware Manual Scan
                try:  
                    final_response["tasks"]["agentTasks"]
                    print(final_response["tasks"]["agentTasks"])

                    # While the Manual Malware Scan is In Progress keep requesting the task until is not in progress anymore  
                    while (['Manual Malware Scan In Progress'] or ['Manual Malware Scan Pending'] in final_response["tasks"]["agentTasks"]): 
                                            
                        # Trying to make the request again to check if the Malware Manual Scan is finished. Will try every 2 minutes 
                        try:
                            res = requests.request("GET", url, headers=headers)
                            final_response = json.loads(res.text)
                            print(final_response["tasks"]["agentTasks"])
                            time.sleep(120)
                            # To raise HTTP exception
                            res.raise_for_status()
                            
                        except requests.exceptions.HTTPError as err:
                                print("An exception occurred when calling the API: {}".format(err))
                                sys.exit(1)
                        
                        # If Malware Manual Scan is finished
                        except KeyError:
                            print("Manual Scan is finished!")
                            # Get when was the last Malware Manual Scan and transforming in seconds
                            manual_scan_epoch_now = final_response["antiMalware"]["lastManualScan"]
                            agent_last_manual_scan = time.strftime("%a, %d %b %Y - %H:%M:%S %p %z", time.gmtime(manual_scan_epoch_now /1000))
                            print("Last time Manual Scan scanned: {}".format(agent_last_manual_scan))
                            sys.exit(0)

                        continue 

                # If there is no Agent Tasks
                except KeyError:
                    print("There is no task with Manual Malware Scan Pending or In Progress Malware Manual Scan in the {} machine at the moment. Please, check the console for more information.".format(final_response["hostName"]))
                    sys.exit(101)
            else: 
                print("The Manual Scan did not worked in this machine {}. Cause: {}. Please, check the console for more information.".format(final_response["hostName"], agent_status))
                sys.exit(10)

            sys.exit(100, "The body of the response was empty")


def runMalwareManualScan():

    # Start the Malware Manual Scan from the CLI 
    print(subprocess.run(["/opt/ds_agent/dsa_control", '-m', 'AntiMalwareManualScan:true'], capture_output=True, check=True))

    # Enough time to have the Malware Manual Scan task in the response or error  
    time.sleep(30)

    # Print a line to separate the Manual Scan request to the Manual Scan query to the console 
    print("-="*50)

def main():

    # If was passed less than 4 arguments (name of the file included here) run the script 
    if len(sys.argv) == 4:

        if sys.argv[1] == "true":

            # Call this func to run the Malware Manual Scan
            runMalwareManualScan()

        # This func is called to query the status of the Malware Manual Scan
        queryManualScanResult(sys.argv[3], sys.argv[2])
    else:
        print("You need to pass at least 3 arguments true or false (for MalwareManualScan) c1region (Your C1 Region) and APIKey (Your C1 APIkey) to the program")
        sys.exit(110)

if __name__ == '__main__':
    main()